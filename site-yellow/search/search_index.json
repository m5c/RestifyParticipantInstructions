{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome!","text":"<p>Welcome to the the RESTify Experiment.</p> <ul> <li>By participating in this study you actively support research, just for that I already would like to thank you!</li> <li>You will be completely anonymous to anyone outside the study. For any ethical concerns or questions, please contact McGill's Research Ethics Board. The study reference is: <code>REB-21-03-009</code></li> <li>Two exciting and straightforward engineering tasks await you. However, be aware that...<ul> <li>... you must exactly follow the individual task instructions.  </li> <li>... you must document your activity. </li> </ul> </li> <li>For any technical concern, please contact the principal investigator.</li> </ul> <p>These instructions are linear. Follow the instructions as you read them. Do not alternate the order or skip sections. Also, do not return to your first task, once you have started your second task. The experiment is finished, once you have reached the end of this documentation.</p> <p>tl;dr: read everything, read it carefully! We will verify your upload before compensation.</p>"},{"location":"index.html#before-you-begin","title":"Before you begin","text":"<p>Time itself is a primary metric in this study. Before you start with the two main tasks, please first run through all preliminary tasks. This will ensure that:</p> <ul> <li>All required software is ready to use on your system.</li> <li>You obtained the skills required for task completion.</li> </ul> <p>Belated installation of required software renders your data worthless to the experiment! Do not continue before you finished the preliminaries.</p>"},{"location":"index.html#your-main-tasks","title":"Your main tasks","text":"<p>Upon completion of the preliminary tasks, please proceed to the two main tasks.</p> <ul> <li>It is absolutely crucial that you respect task order and details.<ul> <li>Process the tasks in the requested order.</li> <li>Double check the codebase: Your second task will require you to work on a different application than the first.</li> <li>Make sure to use the right approach: Your second task will require you to apply a different methodology than the first.</li> </ul> </li> <li>Record your on screen activity: Run a screen recording from the moment you first open the task description until completion.<ul> <li>It is allowed to take breaks and submit multiple screen recordings per task. However, in that case your recordings must in their entirety still cover all your task activity. Furthermore, the submitted file must be named in a way that clearly indicates their chronological order.</li> </ul> </li> </ul> <p>If you change task order, context or approach, or do not document your activity, your data will be worthless to the experiment!</p>"},{"location":"index.html#after-completion","title":"After completion","text":"<p>Once completed you must provide all collected data to the PI. Follow the upload instructions, the PI then emails you an Amazon gift card.</p>"},{"location":"diagram-bookstore.html","title":"Diagram bookstore","text":""},{"location":"diagram-bookstore.html#legacy-application-details","title":"Legacy Application Details","text":"<p>Below diagram highlights classes and methods of the legacy Book Store application, relevant to your RESTification task. For more information on theses methods, also consult the Book Store online documentation. </p>"},{"location":"diagram-xox.html","title":"Diagram xox","text":""},{"location":"diagram-xox.html#legacy-application-details","title":"Legacy Application Details","text":"<p>Below diagram highlights classes and methods of the legacy Tic Tac Toe application, relevant to your RESTification task. For more information on theses methods, also consult the Tic Tac Toe online documentation. </p>"},{"location":"index-template.html","title":"Welcome!","text":"<p>Welcome to the the RESTify Experiment.</p> <ul> <li>By participating in this study you actively support research, just for that I already would like to thank you!</li> <li>You will be completely anonymous to anyone outside the study. For any ethical concerns or questions, please contact McGill's Research Ethics Board. The study reference is: <code>REB-21-03-009</code></li> <li>Two exciting and straightforward engineering tasks await you. However, be aware that...<ul> <li>... you must exactly follow the individual task instructions.  </li> <li>... you must document your activity. </li> </ul> </li> <li>For any technical concern, please contact the principal investigator.</li> </ul> <p>These instructions are linear. Follow the instructions as you read them. Do not alternate the order or skip sections. Also, do not return to your first task, once you have started your second task. The experiment is finished, once you have reached the end of this documentation.</p> <p>tl;dr: read everything, read it carefully! We will verify your upload before compensation.</p>"},{"location":"index-template.html#before-you-begin","title":"Before you begin","text":"<p>Time itself is a primary metric in this study. Before you start with the two main tasks, please first run through all preliminary tasks. This will ensure that:</p> <ul> <li>All required software is ready to use on your system.</li> <li>You obtained the skills required for task completion.</li> </ul> <p>Belated installation of required software renders your data worthless to the experiment! Do not continue before you finished the preliminaries.</p>"},{"location":"index-template.html#your-main-tasks","title":"Your main tasks","text":"<p>Upon completion of the preliminary tasks, please proceed to the two main tasks.</p> <ul> <li>It is absolutely crucial that you respect task order and details.<ul> <li>Process the tasks in the requested order.</li> <li>Double check the codebase: Your second task will require you to work on a different application than the first.</li> <li>Make sure to use the right approach: Your second task will require you to apply a different methodology than the first.</li> </ul> </li> <li>Record your on screen activity: Run a screen recording from the moment you first open the task description until completion.<ul> <li>It is allowed to take breaks and submit multiple screen recordings per task. However, in that case your recordings must in their entirety still cover all your task activity. Furthermore, the submitted file must be named in a way that clearly indicates their chronological order.</li> </ul> </li> </ul> <p>If you change task order, context or approach, or do not document your activity, your data will be worthless to the experiment!</p>"},{"location":"index-template.html#after-completion","title":"After completion","text":"<p>Once completed you must provide all collected data to the PI. Follow the upload instructions, the PI then emails you an Amazon gift card.</p>"},{"location":"preliminaries-end.html","title":"Preliminaries end","text":"<p>Your task will be to formalize the provided interface description, and establish a semantic mapping on existing functionality and parameters.</p> <p>It's a good practice to have the textual description open throughout your task. For your convenience the Zoo description also is available as separate file (as will be the case for the descriptions you'll work with throughout your tasks).</p> <p>There are two ways to achieve this. In each task...</p> <ul> <li>... I'll first walk you through the required steps (using the Zoo).</li> <li>... then I'll ask you to convert a different application the same way.</li> </ul>"},{"location":"preliminaries-end.html#heads-up","title":"Heads up!","text":"<p>If anything in this preliminary section did not work as expected, do not continue!</p> <ul> <li>Do not proceed to the tasks! Instead send an email to the principal investigator.</li> <li>We will arrange a direct zoom call to debug your setup.</li> <li>If everything fails we will provide you with a prepared machine.</li> </ul> <p>If everything worked as expected you may now proceed to your first task.</p>"},{"location":"preliminaries-start.html","title":"Preliminaries","text":""},{"location":"preliminaries-start.html#software","title":"Software","text":"<p>Let's first check that you have all required software installed on your machine.</p> <p>If you are not able to install the required software, you can still participate in the study. Please contact the P.I. to schedule access to a lab computer.</p>"},{"location":"preliminaries-start.html#java","title":"Java","text":"<p>You will need Java, version <code>11.0.5</code>. Unfortunately it has to be exactly this version for compatibility with TouchCORE.</p> <ul> <li>Verify your java version with <code>java -version</code></li> <li>If the output is not exactly 11.0.5, install it:</li> </ul> Mac OSLinuxWindows <ul> <li>Download the JDK 11.0.5 MacOS package.</li> <li>Double click the downloaded <code>.pkg</code> file.</li> <li>Follow the install instructions.</li> </ul> <ul> <li>Download the JDK 11.0.5 Linux package.</li> <li>Extract the file: <code>tar xvf *.tar.gz</code></li> <li>Add the contained commands to your path:<ul> <li>Set the JAVA_HOME and update your PATH in your <code>~/.bashrc</code> file:<ul> <li>Extend path: <code>PATH=$PATH:/wherever/you/extracted/it/jdk-.../bin/</code></li> <li>Set java home: <code>JAVA_HOME=/wherever/you/extracted/it/jdk-...</code></li> </ul> </li> <li>Open a new terminal or type: <code>source ~/.bashrc</code></li> </ul> </li> </ul> <ul> <li>Download the JDK 11.0.5 MSI or ZIP installer.</li> <li>Double click the downloaded file.</li> <li>Follow the install instructions.</li> </ul> <p>After installation, verify that 11.0.5 is now the default installed version. Type again: <code>java -version</code>, check the output.</p>"},{"location":"preliminaries-start.html#maven","title":"Maven","text":"<p>You will need the java build tool Maven.</p> <ul> <li>Test if your system has the <code>mvn</code> command.</li> <li>If missing, install it:</li> </ul> Mac OSLinuxWindows <ul> <li>Unless already installed, get the <code>brew</code> package manager.</li> <li>Install maven: <code>brew install maven</code></li> </ul> <ul> <li>Use the <code>apt</code> package manager to install maven: <code>sudo apt install maven</code></li> </ul> <ul> <li>Download the graphical install wizard.</li> <li>Double click it and follow the instructions.</li> </ul>"},{"location":"preliminaries-start.html#touchcore","title":"TouchCORE","text":"<p>You need a special TouchCORE release, built for this study. Older TouchCORE versions are not compatible.</p> <ul> <li>Download the study release here: TouchCORE (RESTify Study / JAR)</li> <li>Extract the downloaded zip file.</li> </ul> <p>You can not use an older version of TouchCORE. The required features are only contained in the above version.</p> <ul> <li>Verify you can start it:</li> </ul> Mac/Linux + Intel/AMD CPUMac + M1 CPUWindows <p><code>java -jar TouchCORE.jar</code></p> <p><code>softwareupdate --install-rosetta</code> (only first time) <code>java -jar TouchCORE.jar</code></p> <p><code>java -jar TouchCORE.jar</code>  If the TouchCORE window shows black bars, or if mouse clicks are displaced from the cursor location, please set Windows virtual pixel scaling to <code>100%</code>. Then log out of Windows and log in again:  TouchCORE with black bars:   Windows settings to fix black bars and mouse displacement: </p> <p>You should now see this: </p> <p>Should the TouchCORE window does not fit your screen, or should you wish to adjust the window dimensions, edit the file <code>Settings.txt</code> (in the TouchCORE directory) and adjust the lines: <code>DisplayWidth=...</code> and <code>DisplayHeight=...</code>. Fullscreen mode on M1-Macs is not reliable, do not use it if you have an M1-Mac.</p>"},{"location":"preliminaries-start.html#intellij","title":"IntelliJ","text":"<p>Any IDE can be used, but we strongly recommend IntelliJ. Also further instructions and guides on this page are exclusively for IntelliJ.</p> <ul> <li>Download and install IntelliJ.<ul> <li>The community version is sufficient.</li> <li>If desired you can also use the ultimate version (registration with mcgill email required).</li> </ul> </li> </ul>"},{"location":"preliminaries-start.html#zoom","title":"Zoom","text":"<p>You'll need zoom, to record your task activity. (*) Full screen recordings should not reveal personal content. Whenever asked to record, please first close all irrelevant browser tabs and clean your desktop from personal files.</p> <p>Important: We strongly recommend not to use a multi screen setup. It is too easy to forget about only one screen being captured! All you activity must be reflected in the recordings, this includes you working with the provided material, e.g. these instructions. If you have multiple screens we strongly recommend to either deactivate one screen, or enable the \"mirror\" option in your operation system (so they show the identical content).</p> <p>(*) You can use whatever software you want, as long as it captures your entire screen for the full duration of your task activity. We only recommend zoom for REB compliance reasons. E.g. on Mac there is the preinstalled software \"Quicktime\".</p> <ul> <li>No worries you can stay offline, Zoom is only required to record your screen to disk.</li> <li>Unless already installed, install zoom now.</li> <li>Then try to record a short screencast, to test your setup:<ul> <li>Start a new meeting. </li> <li>Click the record button. </li> <li>Start to share your Desktop. </li> <li>Wait a few seconds</li> <li>End the zoom meeting</li> </ul> </li> </ul> <p>Verify that your Desktop recording to file worked. Watch your test recording now!</p>"},{"location":"preliminaries-start.html#applications","title":"Applications","text":"<p>This section describes how to obtain source code and prepared TouchCORE models for the study objects.</p>"},{"location":"preliminaries-start.html#source-code","title":"Source Code","text":"<p>For the upcoming two tasks you will need prepared source code to work on.  </p> <ul> <li>Prepare a dedicated folder for your tasks, e.g. on your Desktop.</li> <li>Clone these three repositories, but do not yet inspect their content:<ul> <li>The Zoo: <code>git clone https://github.com/kartoffelquadrat/Zoo.git</code></li> <li>The Book Store: <code>git clone https://github.com/kartoffelquadrat/BookStoreInternals.git</code></li> <li>Tic Tac Toe: <code>git clone https://github.com/kartoffelquadrat/XoxInternals.git</code></li> </ul> </li> <li>You should now have three new directories in your study folder:</li> <li>Finally, for each folder, verify you can build the code as is:<ul> <li>Open a terminal / command line in the project folder.</li> <li>Run: <code>mvn clean install</code></li> <li>Verify there are no error messages printed to screen.</li> </ul> </li> </ul> <p>All code you are working with in this study is open source, and you are welcome to share and redistribute it, beyond the context of this study. However, whatever published should always reference and give credit to the original source and authors.</p>"},{"location":"preliminaries-start.html#intellij-import-test","title":"IntelliJ Import Test","text":"<p>Let's verify that you can open and run the test source code with IntelliJ:</p> <ul> <li>Start IntelliJ.</li> <li>Use the \"Open\" option to get to the selection dialogue: </li> <li>Select the cloned project root folder, then click the \"Open\" button: </li> <li>Verify you can start the \"Zoo\". Open the <code>DesktopLauncher</code> class and click the green triangle, left of the code: </li> <li>Verify there is sample zoo text output, no error messages.</li> <li>Close IntelliJ again.</li> </ul>"},{"location":"preliminaries-start.html#prepared-models","title":"Prepared Models","text":"<p>Throughout your tasks you will be working with the below TouchCORE model bundle.</p> <ul> <li>Download the model bundle.</li> <li>Extract them all on your disk, e.g. your Desktop.</li> </ul>"},{"location":"preliminaries-start.html#touchcore-import-test","title":"TouchCORE Import Test","text":"<p>Let's verify that you can open the test model:</p> <ul> <li>Launch TouchCORE</li> <li>Try to open the prepared Zoo model (and only the Zoo model!).</li> <li>Select the load icon. </li> <li>Navigate to where you extracted the <code>zoo.zip</code> file.<ul> <li>Use the Arrow Up triangular icon to orient, if needed.</li> <li>Select the <code>zoo.core</code> file.</li> <li>Click the green \"Load\" button. </li> </ul> </li> <li>You should see this: </li> <li>Close TouchCORE again.</li> </ul>"},{"location":"preliminaries-start.html#task-illustration","title":"Task Illustration","text":"<p>In both of your tasks you will convert an existing java application to a RESTful service. This activity is also called RESTify or RESTification.  </p> <ul> <li>A REST application is a service that exposes functionality over a a network protocol:<ul> <li>The service creates the illusion of offering all functionality through CRUD operations on resources. This is a bit like file system access where you can Create, Read, Update or Delete files. However, access is not through a file system, but though the HTTP protocol.</li> <li>A resource is identified by its URL (*Unique Resource Location). It looks e.g. like this: <code>http://127.0.0.1:8080/zoo/animals</code><ul> <li><code>http</code> specifies the protocol to reach this resource</li> <li><code>127.0.0.1:8080</code> sets physical location of the target machine and the port running the REST service.</li> <li><code>zoo/animals</code> is the location of a resource, offered by the running REST service.</li> </ul> </li> <li>A REST interface is always an abstraction of the actual implementation, and should not be confused with RMI (Remote Method Invocation) where existing methods are called as-they-are over network.</li> </ul> </li> <li>At the start of each task I will provide you with the tools for this process and illustrate the requests activity on a sample application, the Zoo.</li> </ul>"},{"location":"preliminaries-start.html#the-zoo-application","title":"The Zoo Application","text":"<p>The Zoo is a minimal java desktop application that offers some demo functionality, namely:</p> <ul> <li>Looking up the Zoo's opening hours.</li> <li>Looking up all names of Zoo animals.</li> <li>Looking up details for a specific animal, identified by name.</li> <li>Adding a new animal to the Zoo.</li> </ul> <p>The above functionality is all provided by a singleton class: <code>Zoo</code>.  </p> <ul> <li>For convenience, here is a class diagram of the <code>Zoo</code> class: </li> <li>You can also inspect the DesktopLauncher, to see how to invoke above methods.</li> <li>Finally you can also run the provided Zoo implementation as is, to see a demo of above functionality:<ul> <li>Open a terminal in your cloned Zoo project</li> <li>Type: <code>mvn clean package exec:java</code></li> </ul> </li> </ul>"},{"location":"preliminaries-start.html#the-zoo-rest-interface-description","title":"The Zoo REST interface description","text":"<p>The RESTification of an application (e.g. the Zoo) requires an interface description. An interface description tells you:</p> <ul> <li>The expected arrangement of REST resources, and also their individual locations.</li> <li>Which methods (<code>Get</code>, <code>Put</code>, <code>Post</code>, <code>Delete</code>) are supported per resource.</li> <li>What happens when a REST resource  method was called, and how required parameters are provided.</li> </ul> <p>For example for the Zoo the interface description could look like this:  </p>"},{"location":"preliminaries.html","title":"Preliminaries","text":""},{"location":"preliminaries.html#software","title":"Software","text":"<p>Let's first check that you have all required software installed on your machine.</p> <p>If you are not able to install the required software, you can still participate in the study. Please contact the P.I. to schedule access to a lab computer.</p>"},{"location":"preliminaries.html#java","title":"Java","text":"<p>You will need Java, version <code>11.0.5</code>. Unfortunately it has to be exactly this version for compatibility with TouchCORE.</p> <ul> <li>Verify your java version with <code>java -version</code></li> <li>If the output is not exactly 11.0.5, install it:</li> </ul> Mac OSLinuxWindows <ul> <li>Download the JDK 11.0.5 MacOS package.</li> <li>Double click the downloaded <code>.pkg</code> file.</li> <li>Follow the install instructions.</li> </ul> <ul> <li>Download the JDK 11.0.5 Linux package.</li> <li>Extract the file: <code>tar xvf *.tar.gz</code></li> <li>Add the contained commands to your path:<ul> <li>Set the JAVA_HOME and update your PATH in your <code>~/.bashrc</code> file:<ul> <li>Extend path: <code>PATH=$PATH:/wherever/you/extracted/it/jdk-.../bin/</code></li> <li>Set java home: <code>JAVA_HOME=/wherever/you/extracted/it/jdk-...</code></li> </ul> </li> <li>Open a new terminal or type: <code>source ~/.bashrc</code></li> </ul> </li> </ul> <ul> <li>Download the JDK 11.0.5 MSI or ZIP installer.</li> <li>Double click the downloaded file.</li> <li>Follow the install instructions.</li> </ul> <p>After installation, verify that 11.0.5 is now the default installed version. Type again: <code>java -version</code>, check the output.</p>"},{"location":"preliminaries.html#maven","title":"Maven","text":"<p>You will need the java build tool Maven.</p> <ul> <li>Test if your system has the <code>mvn</code> command.</li> <li>If missing, install it:</li> </ul> Mac OSLinuxWindows <ul> <li>Unless already installed, get the <code>brew</code> package manager.</li> <li>Install maven: <code>brew install maven</code></li> </ul> <ul> <li>Use the <code>apt</code> package manager to install maven: <code>sudo apt install maven</code></li> </ul> <ul> <li>Download the graphical install wizard.</li> <li>Double click it and follow the instructions.</li> </ul>"},{"location":"preliminaries.html#touchcore","title":"TouchCORE","text":"<p>You need a special TouchCORE release, built for this study. Older TouchCORE versions are not compatible.</p> <ul> <li>Download the study release here: TouchCORE (RESTify Study / JAR)</li> <li>Extract the downloaded zip file.</li> </ul> <p>You can not use an older version of TouchCORE. The required features are only contained in the above version.</p> <ul> <li>Verify you can start it:</li> </ul> Mac/Linux + Intel/AMD CPUMac + M1 CPUWindows <p><code>java -jar TouchCORE.jar</code></p> <p><code>softwareupdate --install-rosetta</code> (only first time) <code>java -jar TouchCORE.jar</code></p> <p><code>java -jar TouchCORE.jar</code>  If the TouchCORE window shows black bars, or if mouse clicks are displaced from the cursor location, please set Windows virtual pixel scaling to <code>100%</code>. Then log out of Windows and log in again:  TouchCORE with black bars:   Windows settings to fix black bars and mouse displacement: </p> <p>You should now see this: </p> <p>Should the TouchCORE window does not fit your screen, or should you wish to adjust the window dimensions, edit the file <code>Settings.txt</code> (in the TouchCORE directory) and adjust the lines: <code>DisplayWidth=...</code> and <code>DisplayHeight=...</code>. Fullscreen mode on M1-Macs is not reliable, do not use it if you have an M1-Mac.</p>"},{"location":"preliminaries.html#intellij","title":"IntelliJ","text":"<p>Any IDE can be used, but we strongly recommend IntelliJ. Also further instructions and guides on this page are exclusively for IntelliJ.</p> <ul> <li>Download and install IntelliJ.<ul> <li>The community version is sufficient.</li> <li>If desired you can also use the ultimate version (registration with mcgill email required).</li> </ul> </li> </ul>"},{"location":"preliminaries.html#zoom","title":"Zoom","text":"<p>You'll need zoom, to record your task activity. (*) Full screen recordings should not reveal personal content. Whenever asked to record, please first close all irrelevant browser tabs and clean your desktop from personal files.</p> <p>Important: We strongly recommend not to use a multi screen setup. It is too easy to forget about only one screen being captured! All you activity must be reflected in the recordings, this includes you working with the provided material, e.g. these instructions. If you have multiple screens we strongly recommend to either deactivate one screen, or enable the \"mirror\" option in your operation system (so they show the identical content).</p> <p>(*) You can use whatever software you want, as long as it captures your entire screen for the full duration of your task activity. We only recommend zoom for REB compliance reasons. E.g. on Mac there is the preinstalled software \"Quicktime\".</p> <ul> <li>No worries you can stay offline, Zoom is only required to record your screen to disk.</li> <li>Unless already installed, install zoom now.</li> <li>Then try to record a short screencast, to test your setup:<ul> <li>Start a new meeting. </li> <li>Click the record button. </li> <li>Start to share your Desktop. </li> <li>Wait a few seconds</li> <li>End the zoom meeting</li> </ul> </li> </ul> <p>Verify that your Desktop recording to file worked. Watch your test recording now!</p>"},{"location":"preliminaries.html#applications","title":"Applications","text":"<p>This section describes how to obtain source code and prepared TouchCORE models for the study objects.</p>"},{"location":"preliminaries.html#source-code","title":"Source Code","text":"<p>For the upcoming two tasks you will need prepared source code to work on.  </p> <ul> <li>Prepare a dedicated folder for your tasks, e.g. on your Desktop.</li> <li>Clone these three repositories, but do not yet inspect their content:<ul> <li>The Zoo: <code>git clone https://github.com/kartoffelquadrat/Zoo.git</code></li> <li>The Book Store: <code>git clone https://github.com/kartoffelquadrat/BookStoreInternals.git</code></li> <li>Tic Tac Toe: <code>git clone https://github.com/kartoffelquadrat/XoxInternals.git</code></li> </ul> </li> <li>You should now have three new directories in your study folder:</li> <li>Finally, for each folder, verify you can build the code as is:<ul> <li>Open a terminal / command line in the project folder.</li> <li>Run: <code>mvn clean install</code></li> <li>Verify there are no error messages printed to screen.</li> </ul> </li> </ul> <p>All code you are working with in this study is open source, and you are welcome to share and redistribute it, beyond the context of this study. However, whatever published should always reference and give credit to the original source and authors.</p>"},{"location":"preliminaries.html#intellij-import-test","title":"IntelliJ Import Test","text":"<p>Let's verify that you can open and run the test source code with IntelliJ:</p> <ul> <li>Start IntelliJ.</li> <li>Use the \"Open\" option to get to the selection dialogue: </li> <li>Select the cloned project root folder, then click the \"Open\" button: </li> <li>Verify you can start the \"Zoo\". Open the <code>DesktopLauncher</code> class and click the green triangle, left of the code: </li> <li>Verify there is sample zoo text output, no error messages.</li> <li>Close IntelliJ again.</li> </ul>"},{"location":"preliminaries.html#prepared-models","title":"Prepared Models","text":"<p>Throughout your tasks you will be working with the below TouchCORE model bundle.</p> <ul> <li>Download the model bundle.</li> <li>Extract them all on your disk, e.g. your Desktop.</li> </ul>"},{"location":"preliminaries.html#touchcore-import-test","title":"TouchCORE Import Test","text":"<p>Let's verify that you can open the test model:</p> <ul> <li>Launch TouchCORE</li> <li>Try to open the prepared Zoo model (and only the Zoo model!).</li> <li>Select the load icon. </li> <li>Navigate to where you extracted the <code>zoo.zip</code> file.<ul> <li>Use the Arrow Up triangular icon to orient, if needed.</li> <li>Select the <code>zoo.core</code> file.</li> <li>Click the green \"Load\" button. </li> </ul> </li> <li>You should see this: </li> <li>Close TouchCORE again.</li> </ul>"},{"location":"preliminaries.html#task-illustration","title":"Task Illustration","text":"<p>In both of your tasks you will convert an existing java application to a RESTful service. This activity is also called RESTify or RESTification.  </p> <ul> <li>A REST application is a service that exposes functionality over a a network protocol:<ul> <li>The service creates the illusion of offering all functionality through CRUD operations on resources. This is a bit like file system access where you can Create, Read, Update or Delete files. However, access is not through a file system, but though the HTTP protocol.</li> <li>A resource is identified by its URL (*Unique Resource Location). It looks e.g. like this: <code>http://127.0.0.1:8080/zoo/animals</code><ul> <li><code>http</code> specifies the protocol to reach this resource</li> <li><code>127.0.0.1:8080</code> sets physical location of the target machine and the port running the REST service.</li> <li><code>zoo/animals</code> is the location of a resource, offered by the running REST service.</li> </ul> </li> <li>A REST interface is always an abstraction of the actual implementation, and should not be confused with RMI (Remote Method Invocation) where existing methods are called as-they-are over network.</li> </ul> </li> <li>At the start of each task I will provide you with the tools for this process and illustrate the requests activity on a sample application, the Zoo.</li> </ul>"},{"location":"preliminaries.html#the-zoo-application","title":"The Zoo Application","text":"<p>The Zoo is a minimal java desktop application that offers some demo functionality, namely:</p> <ul> <li>Looking up the Zoo's opening hours.</li> <li>Looking up all names of Zoo animals.</li> <li>Looking up details for a specific animal, identified by name.</li> <li>Adding a new animal to the Zoo.</li> </ul> <p>The above functionality is all provided by a singleton class: <code>Zoo</code>.  </p> <ul> <li>For convenience, here is a class diagram of the <code>Zoo</code> class: </li> <li>You can also inspect the DesktopLauncher, to see how to invoke above methods.</li> <li>Finally you can also run the provided Zoo implementation as is, to see a demo of above functionality:<ul> <li>Open a terminal in your cloned Zoo project</li> <li>Type: <code>mvn clean package exec:java</code></li> </ul> </li> </ul>"},{"location":"preliminaries.html#the-zoo-rest-interface-description","title":"The Zoo REST interface description","text":"<p>The RESTification of an application (e.g. the Zoo) requires an interface description. An interface description tells you:</p> <ul> <li>The expected arrangement of REST resources, and also their individual locations.</li> <li>Which methods (<code>Get</code>, <code>Put</code>, <code>Post</code>, <code>Delete</code>) are supported per resource.</li> <li>What happens when a REST resource  method was called, and how required parameters are provided.</li> </ul> <p>For example for the Zoo the interface description could look like this:  </p> <ul> <li>Your interface should begin with a top-level resource \"zoo\", not offering any methods.</li> <li>\"zoo\" should have two subresources, \"animals\" and \"openinghours\", both offering a [GET] method.<ul> <li>A [GET] request to \"animals\" should return the list of all animal names in the zoo.</li> <li>A [GET] request to \"openinghours\" should return a description of the zoo's opening hours during the week and on weekends.</li> </ul> </li> <li>The \"animals\" resource should have a single dynamic placeholder subresource representing a specific animal, identified by name. Name it e.g. \"animalname\". This dynamic subresource should offer a [Get] and a [Put] method.<ul> <li>A [GET] request to the dynamic placeholder subresource should provide details on the given animal, identified by the value of the dynamic resource, i.e., the name of the animal (which serves as input parameter).</li> <li>A [PUT] request to the dynamic placeholder subresource should allow adding a new animal to the zoo. The name of the new animal is again specified by the value of the dynamic resource, while further details on the animal are passed as request body payload.</li> </ul> </li> </ul> <p>Your task will be to formalize the provided interface description, and establish a semantic mapping on existing functionality and parameters.</p> <p>It's a good practice to have the textual description open throughout your task. For your convenience the Zoo description also is available as separate file (as will be the case for the descriptions you'll work with throughout your tasks).</p> <p>There are two ways to achieve this. In each task...</p> <ul> <li>... I'll first walk you through the required steps (using the Zoo).</li> <li>... then I'll ask you to convert a different application the same way.</li> </ul>"},{"location":"preliminaries.html#heads-up","title":"Heads up!","text":"<p>If anything in this preliminary section did not work as expected, do not continue!</p> <ul> <li>Do not proceed to the tasks! Instead send an email to the principal investigator.</li> <li>We will arrange a direct zoom call to debug your setup.</li> <li>If everything fails we will provide you with a prepared machine.</li> </ul> <p>If everything worked as expected you may now proceed to your first task.</p>"},{"location":"task-description.html","title":"Task description","text":""},{"location":"task-description.html#compile-and-test","title":"Compile and Test","text":"<p>To compile and test your produced REST service:</p> <ul> <li>Compile your project with: <code>mvn clean package</code></li> <li>Open the newly generated <code>target</code> folder.</li> <li>Run the generated JAR file with: <code>java -jar YOUR-SERVICE-NAME.jar</code></li> <li>Test access with your browser. You can directly access any [GET] resource by typing this into the URL bar: <code>http://127.0.0.1:8080/zoo/animals</code> (where <code>zoo/animals</code> is replaced by a valid GET-enabled resource of your application)</li> </ul>"},{"location":"task-description.html#your-task","title":"Your Task","text":"<p>Now it is your turn! </p> <p>WARNING! Double check that your screen recording is still running. Your entire on-screen task activity must be captured.</p>"},{"location":"task-description.html#instructions","title":"Instructions","text":"<ul> <li>All you need to do is replicate the above steps for the requested app.</li> <li>Limits:<ul> <li>You may stop whenever you deem the task successfully completed.</li> <li>You may also stop after 90 Minutes of refactoring, whatever the state of your refactoring - You are however also allowed to continue as long as you want.</li> </ul> </li> <li>The target REST interface description for your task is below.</li> <li>Please now run a</li> </ul>"},{"location":"task-preamble.html","title":"Task preamble","text":"<p>WARNING! Start your screen recording now. Your entire on-screen task activity must be captured. This includes your familiarization with the task description!</p>"},{"location":"task-preamble.html#task-illustration-restifying-the-zoo","title":"Task Illustration (Restifying the Zoo)","text":""},{"location":"task1.html","title":"Task 1","text":"<p>Your first task is the manual conversion of Tic Tac Toe into a RESTful service.</p> <p>WARNING! Start your screen recording now. Your entire on-screen task activity must be captured. This includes your familiarization with the task description!</p>"},{"location":"task1.html#task-illustration-restifying-the-zoo","title":"Task Illustration (Restifying the Zoo)","text":"<p>I will now illustrate the steps of a manual conversion to a RESTful service on the example of the Zoo. I will use the previously shown Zoo REST interface description.</p> <p>Afterwards, your task will be to apply the same manual methodology on a different application. Your task is not to replicate the Zoo conversion while you are watching.</p> <ul> <li>Please watch this screencast where I demonstrate and explain the required code changes.<ul> <li>Below you find a summary of the main steps.</li> <li>If anything does not work as expected, take a look at the Troubleshoot section.</li> </ul> </li> <li>Additionally you can conveniently inspect both versions and the changes made:<ul> <li>Switch to Desktop Zoo version: <code>git checkout master</code> or inspect code online.</li> <li>Switch to RESTified Zoo version: <code>git checkout RESTified</code> or inspect code online.</li> <li>Compare versions: <code>git diff master..RESTified</code> or inspect changes online.</li> </ul> </li> </ul>"},{"location":"task1.html#project-layout-overview","title":"Project Layout Overview","text":"<p>A manual RESTification is a series of five activities:</p> <ul> <li>Loading of legacy sources into Integrated Development Environment (IntelliJ IDE)</li> <li>Adjustment of the build configuration file: <code>pom.xml</code></li> <li>Replacement of the launcher class</li> <li>Removal of singleton pattern or creation of proxy controllers</li> <li>Decoration of REST controllers and target functions with Spring annotations</li> </ul>"},{"location":"task1.html#loading-legacy-sources-into-ide","title":"Loading Legacy Sources into IDE","text":"<ul> <li>Start IntelliJ.</li> <li>Use the \"Open\" option to get to the selection dialogue: </li> <li>Select the cloned project root folder, then click the \"Open\" button: </li> </ul>"},{"location":"task1.html#build-configuration-changes","title":"Build Configuration Changes","text":"<p>Want to see all Zoo-RESTify <code>pom.xml</code> changes at a glance? Run <code>git diff master..RESTified pom.xml</code>. Green lines were added for RESTification, red lines were removed.</p> <ul> <li>Artifact properties:<ul> <li>Adjust <code>artifactId</code>. Change suffix to \"restified\"</li> <li>Adjust <code>name</code>. Change suffix to \"restified\"</li> </ul> </li> <li>Update developer information:<ul> <li>Remove the  <code>email</code> and <code>organizationUrl</code> lines</li> <li>Change <code>name</code> to your personal codename, e.g. \"<code>blue snail</code>\" (see my email)</li> <li>Change <code>organization</code> to \"<code>mcgill.ca</code>\"</li> </ul> </li> <li>Parent:<ul> <li>Declare inheritance from spring boot parent. Place below snippet right after the <code>&lt;license&gt;...&lt;/license&gt;</code> block:   <pre><code>&lt;!-- this parent block lets this maven project extend a prepared spring specific template.--&gt;\n&lt;parent&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n&lt;version&gt;2.3.0.RELEASE&lt;/version&gt;\n&lt;/parent&gt;\n</code></pre></li> </ul> </li> <li>Dependencies:<ul> <li>Declare dependency towards spring boot artifact: <pre><code>&lt;!-- This block adds spring boot as a dependency, so we can use the parent pom configuration and non-standard annotations.--&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;version&gt;2.3.0.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> </ul> </li> <li>Final Name<ul> <li>Add \"Restified\" as suffix to the <code>finalName</code> attribute value</li> </ul> </li> <li>Build plugins:<ul> <li>Remove plugin for legacy launcher class: <pre><code>&lt;!-- specify main class for exec goal --&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n&lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;\n&lt;version&gt;1.6.0&lt;/version&gt;\n&lt;executions&gt;\n&lt;execution&gt;\n&lt;goals&gt;\n&lt;goal&gt;java&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n&lt;configuration&gt;\n&lt;mainClass&gt;eu.kartoffelquadrat.zoo.DesktopLauncher&lt;/mainClass&gt;\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre></li> <li>Remove plugin for legacy compilation to self contained JAR: <pre><code>&lt;!-- specify main class for JAR manifest--&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n&lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n&lt;version&gt;3.2.0&lt;/version&gt;\n&lt;configuration&gt;\n&lt;archive&gt;\n&lt;manifest&gt;\n&lt;mainClass&gt;eu.kartoffelquadrat.zoo.DesktopLauncher&lt;/mainClass&gt;\n&lt;/manifest&gt;\n&lt;/archive&gt;\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre></li> <li>Add plugin for spring-boot launcher class: (Don't create the new launcher class yet!) Don't forget to adapt the <code>mainClass</code> tag! <pre><code>&lt;!-- Spring specific build plugin, produces self contained JAR with default launcher class.--&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n&lt;configuration&gt;\n&lt;fork&gt;true&lt;/fork&gt;\n&lt;!-- Replace \"zoo\" by actual package name in next line! --&gt;\n&lt;mainClass&gt;eu.kartoffelquadrat.zoo.RestLauncher&lt;/mainClass&gt;\n&lt;/configuration&gt;\n&lt;executions&gt;\n&lt;execution&gt;\n&lt;goals&gt;\n&lt;goal&gt;repackage&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre></li> </ul> </li> </ul> <p>Note: Some changes might note take full effect until you manually reload the <code>pom.xml</code> file. To do so, right click the <code>pom.xml</code> file and select: <code>Maven -&gt; Reload Project</code></p>"},{"location":"task1.html#java-code-changes","title":"Java Code Changes","text":"<p>Hint: You can use <code>git</code> to see all <code>java</code> changes made to the Zoo for manual RESTification. Run: <code>git diff master..RESTified *java</code> Green lines were added for RESTification, red lines were removed.</p>"},{"location":"task1.html#remove-conflicting-files","title":"Remove conflicting files","text":"<p>You have to delete two things:</p> <ul> <li>The legacy launcher, located in <code>src/main/java/eu/karotffelquadrat/*/DesktopLauncher.java</code></li> <li>The legacy unit tests. Remove the entire test folder: <code>src/test</code> (This part has been skipped in the Zoo explanatory video, since there were no test classes)</li> </ul>"},{"location":"task1.html#launcher","title":"Launcher","text":"<p>First thing to do is the creation of a new launcher class. It should be placed anywhere within the <code>src/main/java/eu/kartoffelquadrat/...</code> directory. </p> <ul> <li> <p>Create it by right clicking on the <code>eu.kartoffelquadrat...</code> package: </p> </li> <li> <p>Enter <code>RestLauncher</code> as class name, do not type the <code>.java</code> extension. IntelliJ will handle that for you. </p> </li> </ul> <p>Code of the <code>RestLauncher.java</code> class. (Replaces the legacy launcher)</p> <pre><code>package eu.kartoffelquadrat.zoo;  &lt;----- Replace \"zoo\" by whatever application you are working on\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n/**\n * This class powers up Spring and ensures the annotated controllers are detected.\n */\n@SpringBootApplication\npublic class RestLauncher {\npublic static void main(String[] args) {\nSpringApplication.run(RestLauncher.class, args);\n}\n}\n</code></pre>"},{"location":"task1.html#beans-and-singletons","title":"Beans and Singletons","text":"<ul> <li>Spring creates new instances of classes annotated with: <pre><code>@RestController\n</code></pre></li> <li>The existing singleton pattern is bypassed, since Spring uses reflection to gain constructor access, even if the declared constructor is private.</li> <li>Having both <code>@RestController</code> and a <code>getInstance</code> method in the same class is dangerous. There are two ways to side-step inconsistency issues:</li> </ul> Autowiring (Recommended)Proxy Classes <ul> <li>If you chose Autowiring, you do not create new classes. You directly annotate the relevant existing classes with <code>@RestController</code>.</li> <li>This tells Spring to create one instance per annotated class, using a default constructor.</li> <li>Any existing singleton pattern is therefore obsolete: If you annotated a class with <code>@RestController</code>, make sure to remove the singleton pattern (the <code>getInstance</code> method) and make the default constructor public.</li> <li>Whenever an instance of such an annotated class is required, you can obtain the spring maintained instance with <code>@Autowired</code>. Example: <pre><code>package eu.kartoffelquadrat.zoo;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RestController;\n@RestController\npublic class FooController {\n/*\n    @Autowired ensures the zoo field is set after instantiation of FooController, given Zoo is annotated with @RestController.\n    */\n@Autowired\nZoo zoo;\npublic void bar() {\n// Here you can access the zoo instance using the local, autowired field (instead of calling the obsolete getInstance method)\nzoo.getOpeningHours();\n}\n}\n</code></pre> <p>Autowired fields are only accessible after class instantiation. Do not invoke methods that require autowired values from a constructor, or you will get a <code>NullPointerException</code> at runtime. Instead annotate those methods with <code>@PostConstruct</code>. This advises spring to invoke a method after class instantiation.</p> </li> </ul> <ul> <li>If you chose Proxy Classes, you do annotate the existing classes. You instead replicate every existing relevant class and place all annotations in the replica. The replica acts as proxy that forwards every method call to the original, using <code>getInstance()</code>.</li> <li>Keep the singleton pattern in the original java classes. They remain untouched. Instead place an <code>@RestController</code> annotation in every proxy class created. Example: <pre><code>package eu.kartoffelquadrat.zoo;\nimport org.springframework.web.bind.annotation.RestController;\n/**\nThis Proxy class is decorated with @RestController, instead of the original singleton class. Any required method of the original class can be proxied with an internal getInstance call.\n*/\n@RestController\npublic class ZooController {\n/** Proxied access to a method of the original / singleton class.\n// Mapping annotation goes here.\npublic OpeningHours getOpeningHours() {\n// Access to the original class is achieved with a call to getInstance.\nreturn Zoo.getInstance().getOpeningHours();\n}\n}\n</code></pre></li> </ul>"},{"location":"task1.html#resource-mapping-with-annotations","title":"Resource Mapping with Annotations","text":"<p>Note: Below annotation syntax can only be used in classes annotated with <code>@RestController</code>.</p> <ul> <li> <p>Resource mappings (these annotations decorate functions)</p> <ul> <li>Annotations types:  </li> </ul> Get Put Post Delete <code>@GetMapping(\"...\")</code> <code>@PutMapping(\"...\")</code> <code>@PostMapping(\"...\")</code> <code>@DeleteMapping(\"...\")</code> <ul> <li>Arguments:<ul> <li>Static: Full resource path within quotes, e.g.: <code>\"zoo/animals\"</code></li> <li>Dynamic: Full resource path within quotes. Any dynamic placeholder on path is marked by curly brackets, e.g.:<code>\"zoo/animals/{animalname}\"</code></li> </ul> </li> </ul> </li> <li> <p>Parameter mapping (these annotations decorate function parameters)</p> <ul> <li>Pathvariable: <code>@PathVariable(\"animalname\")</code></li> <li>Request body: <code>@RequestBody</code></li> </ul> </li> </ul>"},{"location":"task1.html#build-and-run","title":"Build and Run","text":"<p>These instructions are to build and run from command line. While developing in IntelliJ you can safly use the \"green triangle button\" next to your new spring launcher class. </p> <p>The first time you start your REST application you might see a warning about incoming connections. Select \"Allow\".  </p> <p>At some point you also need to build your application into a self contained artifact:  </p> Mac OS / LinuxWindows <ul> <li>Build a self contained executable jar file: <code>mvn clean package</code></li> <li>Run the jar file: <code>java -jar target/zoorestified.jar</code> <p><code>zoorestified</code> is the name you provided as <code>finalName</code> in your <code>pom.xml</code>.</p> </li> </ul> <ul> <li>Build a self contained executable jar file: <code>mvn clean package</code></li> <li>Run the jar file: <code>java -jar target\\zoorestified.jar</code> <p><code>zoorestified</code> is the name you provided as <code>finalName</code> in your <code>pom.xml</code>.</p> </li> </ul>"},{"location":"task1.html#compile-and-test","title":"Compile and Test","text":"<p>To compile and test your produced REST service:</p> <ul> <li>Compile your project with: <code>mvn clean package</code></li> <li>Open the newly generated <code>target</code> folder.</li> <li>Run the generated JAR file with: <code>java -jar YOUR-SERVICE-NAME.jar</code></li> <li>Test access with your browser. You can directly access any [GET] resource by typing this into the URL bar: <code>http://127.0.0.1:8080/zoo/animals</code> (where <code>zoo/animals</code> is replaced by a valid GET-enabled resource of your application)</li> </ul>"},{"location":"task1.html#your-task","title":"Your Task","text":"<p>Now it is your turn! </p> <p>WARNING! Double check that your screen recording is still running. Your entire on-screen task activity must be captured.</p>"},{"location":"task1.html#instructions","title":"Instructions","text":"<ul> <li>All you need to do is replicate the above steps for the requested app.</li> <li>Limits:<ul> <li>You may stop whenever you deem the task successfully completed.</li> <li>You may also stop after 90 Minutes of refactoring, whatever the state of your refactoring - You are however also allowed to continue as long as you want.</li> </ul> </li> <li>The target REST interface description for your task is below.</li> <li>Please now run a manual conversion of Tic Tac Toe into a RESTful service.</li> </ul>"},{"location":"task1.html#legacy-application-details","title":"Legacy Application Details","text":"<p>Below diagram highlights classes and methods of the legacy Tic Tac Toe application, relevant to your RESTification task. For more information on theses methods, also consult the Tic Tac Toe online documentation. </p>"},{"location":"task1.html#interface-description-tic-tac-toe-resources-and-methods","title":"Interface Description: Tic Tac Toe Resources and Methods","text":"<ul> <li>Your interface should begin with a top-level resource \"xox\", offering two methods.<ul> <li>A [GET] request to the \"xox\" resource should result in a lookup of all currently running games, as a list of game-identifiers.</li> <li>A [POST] request to the \"xox\" resource should allow adding of a new game instance. The identifier is generated on server side and does not need to be provided, however the request body should provide all parameters required as game settings.</li> </ul> </li> <li>The \"xox\" resource should possess a dynamic placeholder subresource, representing individual game instances by identifier.<ul> <li>A [GET] request on the identifier placeholder resource should retrieve scoring information for the targeted game.</li> <li>A [DELETE] request on the identifier placeholder resource should remove the game from the list of all games.</li> </ul> </li> <li>The dynamic resource representing games by their identifier should have two subresources: \"players\" and \"board\".<ul> <li>A [GET] request on the \"players\" resource should return a list of player names involved into the specified game. The game instance is in this case provided by value of the parent placeholder resource.</li> <li>A [GET] request on the \"board\" resource should return a snapshot of the current game board layout, is to say which cells empty or occupied by a given player. The game instance is in this case provided by value of the parent placeholder resource.</li> </ul> </li> <li>The \"players\" resource should possess a dynamic placeholder resource, encoding the name of a given player. This resource has no methods, but in its turn a subresource \"actions\".<ul> <li>A [GET] request on actions should return an array of possible actions for a given player in a given game. Each action represents the claim of an available field. The required player  name is provided by the parent dynamic resource representing a player name and the game instance is provided by the value of the dynamic sub resource of the root resource.</li> </ul> </li> <li>The \"actions\" resource should possess a dynamic placeholder resource that serves to identify the a specific selection of the actions available to a given player in a given game.<ul> <li>A [POST] request on that dynamic placeholder resource should allow the selection of a given action, to perform it. The precise action is then identified by an int value taken by the dynamic resource, representing the position in the array of all possible actions. The required player  name is provided by the parent dynamic resource representing a player name and the game instance is provided by the value of the dynamic sub resource of the root resource.</li> </ul> </li> </ul> <p>Click here to download interface description as file.</p>"},{"location":"task1.html#troubleshoot","title":"Troubleshoot","text":"<ul> <li>Q: I open the project with IntelliJ, but everything is underlined in red. A: The projet was not correctly opened. There are multiple potential fixes:     Option 1) Reload <code>pom.xml</code>: Right click the file, then select <code>Maven -&gt; Reload Project</code>.      Option 2) Verify the JDK version: Select <code>File</code> -&gt; <code>Project Structure...</code>. Verify <code>11.0.5</code> is selected in the Project and SDKs tab:      Option 3) Invalidate IntelliJ caches: Select <code>File</code> -&gt; <code>Invalidate Caches...</code>. Then select the first two checkboxes:      Option 4) Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown.</li> <li>Q: I cannot compile / run the project, the green button is greyed out. A: The project has no launch configuration by default, therefore the arrow in the top bar is not available. Open the <code>RestLauncher</code> class instead and click on one of the green triangles, left of the code. </li> <li>Q: I RESTified the application, but when I start it there is a Nullpointer-Exception. A: Most likely the constructor code in one of the classes annotated with <code>@RestController</code> invokes a call to an <code>@Autowired</code> field. Autowiring is only available after class initialization (after the constructor). Do not call any method with access to autowired fields in a constructor. Instead tell spring to call it after class initialization. Use the <code>@PostConstruct</code> annotation. See <code>@PostConstruct</code>.</li> <li>Q: I've made a mistake on project import, how can I start from scratch? Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown.</li> <li>Q: I've modified the <code>pom.xml</code> file as shown, but IntelliJ still does not seem to know about Spring. A: Sometimes the changes made to the <code>pom.xml</code> are not automatically detected. (See first question, <code>pom.xml</code>reload```.)</li> <li>Q: IntelliJ asks me whether I want to trust the project sources. Should I? A: Yes. This is just a security mechanism to prevent malicious code being executed on project import. The provided sources are all from us and can be trusted. </li> </ul>"},{"location":"task2.html","title":"Task 2","text":"<p>Your second task is the TouchCORE assisted conversion of the Book Store into a RESTful service.</p> <p>WARNING! Start your screen recording now. Your entire on-screen task activity must be captured. This includes your familiarization with the task description!</p>"},{"location":"task2.html#task-illustration-restifying-the-zoo","title":"Task Illustration (Restifying the Zoo)","text":"<p>I will now illustrate the steps of a TouchCORE assisted conversion to a RESTful service on the example of the Zoo. I will use the previously shown Zoo REST interface description.</p> <p>Afterwards, your task will be to apply the same TouchCORE assisted methodology on a different application. Your task is not to replicate the Zoo conversion while you are watching.</p> <ul> <li>Please now watch this screencast where I demonstrate and explain TouchCORE usage.<ul> <li>Below you then find a summary of the main steps.</li> <li>If anything does not work as expected, take a look at the Troubleshoot section.</li> </ul> </li> </ul>"},{"location":"task2.html#load-touchcore-project","title":"Load TouchCORE Project","text":"<ul> <li>Locate the TouchCORE release folder</li> <li>Launch TouchCORE: <code>java -jar TouchCORE.jar</code></li> <li>Load the prepared Zoo model:<ul> <li>Click the folder icon. </li> </ul> </li> <li>Navigate to the provided Class Diagram<ul> <li>Tap and hold the \"Zoo\" box </li> <li>Select \"Open Realization Model\"</li> <li>Inspect the Class Diagram (Business Logic) </li> </ul> </li> </ul>"},{"location":"task2.html#draw-restl-model","title":"Draw ResTL Model","text":"<ul> <li>Use the Navigation bar to leave the Class Diagram </li> <li>Open the \"ResTL\" perspective:<ul> <li>Tap and hold the \"Zoo\" box </li> <li>Select \"Open Realization Model\"</li> <li>Open the \"Exposed Interface\" model</li> </ul> </li> <li>Modify the ResTL model according to the provided Interface Description<ul> <li>Drag down to add new resources to the tree (start dragging slightly under an existing box) </li> <li>Click the circles to enable Get / Put / Post / Delete methods for a resource. </li> </ul> </li> <li>If you made a mistake, either<ul> <li>tap and hold on a resource to remove it</li> <li>double click a resource to rename it</li> </ul> </li> </ul>"},{"location":"task2.html#resource-and-parameter-mapping","title":"Resource and Parameter Mapping","text":"<ul> <li>While in the ResTL perspective, additionally open the Class Diagram perspective in split-view mode.<ul> <li>Click the Split-View Button </li> <li>Select the Class Diagram model</li> </ul> </li> <li>Drag lines to establish mappings<ul> <li>Connect Resource Methods (circles) to Class Operations </li> <li>Connect Dynamic Resources (text in boxes) to Operation Parameters </li> </ul> </li> </ul> <p>Heads-up: A correctly mapped model showcases lines of both colours, blue and green! If you only see one colour you may have forgotten parameter mappings.</p>"},{"location":"task2.html#code-generation","title":"Code Generation","text":"<ul> <li>Make sure the original application is registered in your system:<ul> <li>Clone the sources of the original (unrestified) java application</li> <li>Install it as library, with <code>mvn clean install</code></li> </ul> </li> <li>Generate the RESTified code with the Transformator button </li> </ul>"},{"location":"task2.html#build-and-run-your-rest-service","title":"Build and Run your REST service","text":"<ul> <li>Navigate to your TouchCORE model directory</li> <li>Open a terminal in the new generated sources folder</li> <li>Run the RESTful service with: <code>mvn clean package spring-boot:run</code></li> <li>Test any Get operation with your browser, e.g.: <code>http://127.0.0.1:8080/zoo/animals</code></li> </ul>"},{"location":"task2.html#compile-and-test","title":"Compile and Test","text":"<p>To compile and test your produced REST service:</p> <ul> <li>Compile your project with: <code>mvn clean package</code></li> <li>Open the newly generated <code>target</code> folder.</li> <li>Run the generated JAR file with: <code>java -jar YOUR-SERVICE-NAME.jar</code></li> <li>Test access with your browser. You can directly access any [GET] resource by typing this into the URL bar: <code>http://127.0.0.1:8080/zoo/animals</code> (where <code>zoo/animals</code> is replaced by a valid GET-enabled resource of your application)</li> </ul>"},{"location":"task2.html#your-task","title":"Your Task","text":"<p>Now it is your turn! </p> <p>WARNING! Double check that your screen recording is still running. Your entire on-screen task activity must be captured.</p>"},{"location":"task2.html#instructions","title":"Instructions","text":"<ul> <li>All you need to do is replicate the above steps for the requested app.</li> <li>Limits:<ul> <li>You may stop whenever you deem the task successfully completed.</li> <li>You may also stop after 90 Minutes of refactoring, whatever the state of your refactoring - You are however also allowed to continue as long as you want.</li> </ul> </li> <li>The target REST interface description for your task is below.</li> <li>Please now run a TouchCORE assisted conversion of the Book Store into a RESTful service.</li> </ul>"},{"location":"task2.html#legacy-application-details","title":"Legacy Application Details","text":"<p>Below diagram highlights classes and methods of the legacy Book Store application, relevant to your RESTification task. For more information on theses methods, also consult the Book Store online documentation. </p>"},{"location":"task2.html#interface-description-book-store-resources-and-methods","title":"Interface Description: Book Store Resources and Methods","text":"<ul> <li>Your interface should begin with a top-level resource \"bookstore\", not offering any methods.  </li> <li>\"bookstore\" has two subresources, \"isbns\" and \"stocklocations\", both offering a [GET] method.  <ul> <li>A [GET] request to \"isbns\" should result in a listing of all isbn numbers stored in the system.  </li> <li>A [GET] request to \"stocklocations\" should result in a listing of all geographic store locations.</li> </ul> </li> <li>The \"isbns\" resource should have a single dynamic placeholder subresource representing an isbn number,<ul> <li>A [GET] request to the dynamic placeholder subresource should provide details on a given book, identified by isbn number which serves as input parameter.</li> <li>A [PUT] request to the dynamic placeholder subresource should allow adding a new book to the system. All details on the book are passed as request body payload. (Note: This might look a bit peculiar to not use the value of the dynamic placeholder \"isbn\" for a subsequent mapping. That is ok here, because the required ISBN information is also contained in the body payload object. We do not want you to add any additional validation here, to keep things simple.)</li> </ul> </li> <li>The dynamic placeholder resource should have a child resource \"comments\", representing comments for a given book, identified by isbn. The value of the parent placeholder resource determines which book is targeted.<ul> <li>A [GET] request to the \"comments\" resource should result in a listing of all comments for the specified book. The value of the parent resource representing an isbn number servers as input parameter. The result should index comments by their id.</li> <li>A [POST] request to the \"comments\" resource should allow the creation of new comments. The id of the new comment is generated on server side and not required, however, again the parent placeholder resource encodes the isbn of the targeted book. The comment itself is to be transmitted as request body payload.</li> <li>A [DELETE] request to the \"comments\" resource should delete all comments for a given book, identified by the isbn number of the parent dynamic placeholder resource.</li> </ul> </li> <li>The \"comments resource should have a dynamic subresource representing a specific comment by id. It offers two methods: [POST] and [DELETE].<ul> <li>A [POST] request to specific comment should allow to alter the content of that comment. Target book and target comment are respectively identified by the dynamic resource itself and the corresponding grandparent placeholder resource. Similar to comment creation, the new comment content is tranmitted as request body payload.</li> <li>A [DELETE] request to specific comment should allow removal of an existing comment. Target book and target comment are respectively identified by the dynamic resource itself and the corresponding grandparent placeholder resource.</li> </ul> </li> <li>The \"stocklocations\" resource shoud have a dynamic subresource representing a specific geographic location (city name).<ul> <li>A [GET] request to a specific location should return the exact amount of book copies in stock for the given location, as a map indexed by isbn number. The path variable itself providing the target location can serve as argument for a corresponding method call.</li> </ul> </li> <li>Finally, the dynamic resource representing a specific geographic location should itself have a dynamic subresource representing the stock for a given book at the given location.<ul> <li>A [GET] request on this dynamic resource should return the amount of copies in stock for a book specified by isbn (the value of this placeholder resources) and stock location (the value of this resource's parent placeholder resource)</li> <li>A [POST] request on this dynamic resource should update the current amount of copies for a given book. Target location and isbn are likewise encoded by this placeholder resource and its parent placeholder resource. The new amount is provided as request body payload.</li> </ul> </li> </ul> <p>Click here to download interface description as file.</p>"},{"location":"task2.html#troubleshoot","title":"Troubleshoot","text":"<ul> <li>Q: I can't start TouchCORE. Nothing happens when I double-click the JAR. A: Start by double click is unfortunately not supported. Instead open a terminal in the unzipped TouchCORE folder, then type: <code>java -jar TouchCORE.jar</code></li> <li>Q: TouchCORE crashes with an exception, right after start. A: Most likely you are not using a compatible Java version. Run <code>java -version</code> and verify the output is <code>11.0.5</code>.</li> <li>Q: I can't resize the TouchCORE window. A: The window can not be resized while TouchCORE is running, but if your screen is big enough, you can change the resolution in the file <code>Settings.txt</code>, next to the <code>TouchCORE.jar</code> file.</li> <li>Q: Nothing happens when I click elements in TouchCORE. A: TouchCORE was developed for touch screens, therefore some elements require time gestures, e.g. Tap-and-Hold. Try a long click on the element.</li> <li>Q: I cannot scroll around. A: Click with the right mouse button, while moving the mouse to scroll.</li> <li>Q: I cannot zoom. A: Use the mouse wheel or a two-finger drag up or down on your touchpad to zoom in or out.</li> <li>Q: I can not find how to open the prepared models. A: By default TouchCORE shows only models that are in the same location as where the software was launched. Use the upward arrow in the top left corner of the TouchCORE file-explorer to navigate to a different folder on your file-system.</li> <li>Q: TouchCORE says it generated code, but I do not find the output folder. A: The java code is always generated inside the model project. Locate the folder with the original models, inside you will find a folder named generated-maven-project.</li> <li>Q: The code is generated, but when I compile it with Maven, it complains about the bookstore/xox-internals not found. What went wrong? A: The generated sources use the legacy sources as library. Maven needs to know about the legacy sources , therefore you need to compile the original sources at least once with: <code>mvn clean install</code>.</li> </ul>"},{"location":"troubleshoot-manual.html","title":"Troubleshoot manual","text":""},{"location":"troubleshoot-manual.html#troubleshoot","title":"Troubleshoot","text":"<ul> <li>Q: I open the project with IntelliJ, but everything is underlined in red. A: The projet was not correctly opened. There are multiple potential fixes:     Option 1) Reload <code>pom.xml</code>: Right click the file, then select <code>Maven -&gt; Reload Project</code>.      Option 2) Verify the JDK version: Select <code>File</code> -&gt; <code>Project Structure...</code>. Verify <code>11.0.5</code> is selected in the Project and SDKs tab:      Option 3) Invalidate IntelliJ caches: Select <code>File</code> -&gt; <code>Invalidate Caches...</code>. Then select the first two checkboxes:      Option 4) Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown.</li> <li>Q: I cannot compile / run the project, the green button is greyed out. A: The project has no launch configuration by default, therefore the arrow in the top bar is not available. Open the <code>RestLauncher</code> class instead and click on one of the green triangles, left of the code. </li> <li>Q: I RESTified the application, but when I start it there is a Nullpointer-Exception. A: Most likely the constructor code in one of the classes annotated with <code>@RestController</code> invokes a call to an <code>@Autowired</code> field. Autowiring is only available after class initialization (after the constructor). Do not call any method with access to autowired fields in a constructor. Instead tell spring to call it after class initialization. Use the <code>@PostConstruct</code> annotation. See <code>@PostConstruct</code>.</li> <li>Q: I've made a mistake on project import, how can I start from scratch? Delete the cloned folder, clone the repository again, then make sure to open the project exactly as shown.</li> <li>Q: I've modified the <code>pom.xml</code> file as shown, but IntelliJ still does not seem to know about Spring. A: Sometimes the changes made to the <code>pom.xml</code> are not automatically detected. (See first question, <code>pom.xml</code>reload```.)</li> <li>Q: IntelliJ asks me whether I want to trust the project sources. Should I? A: Yes. This is just a security mechanism to prevent malicious code being executed on project import. The provided sources are all from us and can be trusted. </li> </ul>"},{"location":"troubleshoot-touchcore.html","title":"Troubleshoot touchcore","text":""},{"location":"troubleshoot-touchcore.html#troubleshoot","title":"Troubleshoot","text":"<ul> <li>Q: I can't start TouchCORE. Nothing happens when I double-click the JAR. A: Start by double click is unfortunately not supported. Instead open a terminal in the unzipped TouchCORE folder, then type: <code>java -jar TouchCORE.jar</code></li> <li>Q: TouchCORE crashes with an exception, right after start. A: Most likely you are not using a compatible Java version. Run <code>java -version</code> and verify the output is <code>11.0.5</code>.</li> <li>Q: I can't resize the TouchCORE window. A: The window can not be resized while TouchCORE is running, but if your screen is big enough, you can change the resolution in the file <code>Settings.txt</code>, next to the <code>TouchCORE.jar</code> file.</li> <li>Q: Nothing happens when I click elements in TouchCORE. A: TouchCORE was developed for touch screens, therefore some elements require time gestures, e.g. Tap-and-Hold. Try a long click on the element.</li> <li>Q: I cannot scroll around. A: Click with the right mouse button, while moving the mouse to scroll.</li> <li>Q: I cannot zoom. A: Use the mouse wheel or a two-finger drag up or down on your touchpad to zoom in or out.</li> <li>Q: I can not find how to open the prepared models. A: By default TouchCORE shows only models that are in the same location as where the software was launched. Use the upward arrow in the top left corner of the TouchCORE file-explorer to navigate to a different folder on your file-system.</li> <li>Q: TouchCORE says it generated code, but I do not find the output folder. A: The java code is always generated inside the model project. Locate the folder with the original models, inside you will find a folder named generated-maven-project.</li> <li>Q: The code is generated, but when I compile it with Maven, it complains about the bookstore/xox-internals not found. What went wrong? A: The generated sources use the legacy sources as library. Maven needs to know about the legacy sources , therefore you need to compile the original sources at least once with: <code>mvn clean install</code>.</li> </ul>"},{"location":"upload.html","title":"Upload","text":"<p>Congratulations, you're almost done! Last thing to do is to send us your results:</p> <ul> <li>We prepared a personal upload location for your results. The link is in our initial email.</li> <li>Please make not to miss anything in your upload. Below is a checklist.</li> </ul>"},{"location":"upload.html#checklist","title":"Checklist","text":"<ul> <li>Screen recordings</li> <li>Project folders (both tasks)<ul> <li>For you manual task we want the folder with all your sources.</li> <li>For your TouchCORE assisted task we want the model folder. Make sure it also contains the generated maven sources folder.</li> </ul> </li> <li>Comments (please use this form), fill it out and upload it.</li> </ul>"},{"location":"upload.html#claim-your-gift-card","title":"Claim your gift card","text":"<ul> <li>Once everything is uploaded, send the PI an email.</li> <li>Give us a moment to check your submission, if everything is there you'll receive your gift card shortly!</li> </ul>"},{"location":"upload.html#curious","title":"Curious?","text":"<p>You're curious about doing more research? Want to do a bachelor / masters thesis with us? Please send us an email, we have tons of cool student projects!</p>"},{"location":"zoo-manual.html","title":"Zoo manual","text":"<p>I will now illustrate the steps of a manual conversion to a RESTful service on the example of the Zoo. I will use the previously shown Zoo REST interface description.</p> <p>Afterwards, your task will be to apply the same manual methodology on a different application. Your task is not to replicate the Zoo conversion while you are watching.</p> <ul> <li>Please watch this screencast where I demonstrate and explain the required code changes.<ul> <li>Below you find a summary of the main steps.</li> <li>If anything does not work as expected, take a look at the Troubleshoot section.</li> </ul> </li> <li>Additionally you can conveniently inspect both versions and the changes made:<ul> <li>Switch to Desktop Zoo version: <code>git checkout master</code> or inspect code online.</li> <li>Switch to RESTified Zoo version: <code>git checkout RESTified</code> or inspect code online.</li> <li>Compare versions: <code>git diff master..RESTified</code> or inspect changes online.</li> </ul> </li> </ul>"},{"location":"zoo-manual.html#project-layout-overview","title":"Project Layout Overview","text":"<p>A manual RESTification is a series of five activities:</p> <ul> <li>Loading of legacy sources into Integrated Development Environment (IntelliJ IDE)</li> <li>Adjustment of the build configuration file: <code>pom.xml</code></li> <li>Replacement of the launcher class</li> <li>Removal of singleton pattern or creation of proxy controllers</li> <li>Decoration of REST controllers and target functions with Spring annotations</li> </ul>"},{"location":"zoo-manual.html#loading-legacy-sources-into-ide","title":"Loading Legacy Sources into IDE","text":"<ul> <li>Start IntelliJ.</li> <li>Use the \"Open\" option to get to the selection dialogue: </li> <li>Select the cloned project root folder, then click the \"Open\" button: </li> </ul>"},{"location":"zoo-manual.html#build-configuration-changes","title":"Build Configuration Changes","text":"<p>Want to see all Zoo-RESTify <code>pom.xml</code> changes at a glance? Run <code>git diff master..RESTified pom.xml</code>. Green lines were added for RESTification, red lines were removed.</p> <ul> <li>Artifact properties:<ul> <li>Adjust <code>artifactId</code>. Change suffix to \"restified\"</li> <li>Adjust <code>name</code>. Change suffix to \"restified\"</li> </ul> </li> <li>Update developer information:<ul> <li>Remove the  <code>email</code> and <code>organizationUrl</code> lines</li> <li>Change <code>name</code> to your personal codename, e.g. \"<code>blue snail</code>\" (see my email)</li> <li>Change <code>organization</code> to \"<code>mcgill.ca</code>\"</li> </ul> </li> <li>Parent:<ul> <li>Declare inheritance from spring boot parent. Place below snippet right after the <code>&lt;license&gt;...&lt;/license&gt;</code> block:   <pre><code>&lt;!-- this parent block lets this maven project extend a prepared spring specific template.--&gt;\n&lt;parent&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n&lt;version&gt;2.3.0.RELEASE&lt;/version&gt;\n&lt;/parent&gt;\n</code></pre></li> </ul> </li> <li>Dependencies:<ul> <li>Declare dependency towards spring boot artifact: <pre><code>&lt;!-- This block adds spring boot as a dependency, so we can use the parent pom configuration and non-standard annotations.--&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;version&gt;2.3.0.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> </ul> </li> <li>Final Name<ul> <li>Add \"Restified\" as suffix to the <code>finalName</code> attribute value</li> </ul> </li> <li>Build plugins:<ul> <li>Remove plugin for legacy launcher class: <pre><code>&lt;!-- specify main class for exec goal --&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\n&lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;\n&lt;version&gt;1.6.0&lt;/version&gt;\n&lt;executions&gt;\n&lt;execution&gt;\n&lt;goals&gt;\n&lt;goal&gt;java&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n&lt;configuration&gt;\n&lt;mainClass&gt;eu.kartoffelquadrat.zoo.DesktopLauncher&lt;/mainClass&gt;\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre></li> <li>Remove plugin for legacy compilation to self contained JAR: <pre><code>&lt;!-- specify main class for JAR manifest--&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n&lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n&lt;version&gt;3.2.0&lt;/version&gt;\n&lt;configuration&gt;\n&lt;archive&gt;\n&lt;manifest&gt;\n&lt;mainClass&gt;eu.kartoffelquadrat.zoo.DesktopLauncher&lt;/mainClass&gt;\n&lt;/manifest&gt;\n&lt;/archive&gt;\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre></li> <li>Add plugin for spring-boot launcher class: (Don't create the new launcher class yet!) Don't forget to adapt the <code>mainClass</code> tag! <pre><code>&lt;!-- Spring specific build plugin, produces self contained JAR with default launcher class.--&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n&lt;configuration&gt;\n&lt;fork&gt;true&lt;/fork&gt;\n&lt;!-- Replace \"zoo\" by actual package name in next line! --&gt;\n&lt;mainClass&gt;eu.kartoffelquadrat.zoo.RestLauncher&lt;/mainClass&gt;\n&lt;/configuration&gt;\n&lt;executions&gt;\n&lt;execution&gt;\n&lt;goals&gt;\n&lt;goal&gt;repackage&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre></li> </ul> </li> </ul> <p>Note: Some changes might note take full effect until you manually reload the <code>pom.xml</code> file. To do so, right click the <code>pom.xml</code> file and select: <code>Maven -&gt; Reload Project</code></p>"},{"location":"zoo-manual.html#java-code-changes","title":"Java Code Changes","text":"<p>Hint: You can use <code>git</code> to see all <code>java</code> changes made to the Zoo for manual RESTification. Run: <code>git diff master..RESTified *java</code> Green lines were added for RESTification, red lines were removed.</p>"},{"location":"zoo-manual.html#remove-conflicting-files","title":"Remove conflicting files","text":"<p>You have to delete two things:</p> <ul> <li>The legacy launcher, located in <code>src/main/java/eu/karotffelquadrat/*/DesktopLauncher.java</code></li> <li>The legacy unit tests. Remove the entire test folder: <code>src/test</code> (This part has been skipped in the Zoo explanatory video, since there were no test classes)</li> </ul>"},{"location":"zoo-manual.html#launcher","title":"Launcher","text":"<p>First thing to do is the creation of a new launcher class. It should be placed anywhere within the <code>src/main/java/eu/kartoffelquadrat/...</code> directory. </p> <ul> <li> <p>Create it by right clicking on the <code>eu.kartoffelquadrat...</code> package: </p> </li> <li> <p>Enter <code>RestLauncher</code> as class name, do not type the <code>.java</code> extension. IntelliJ will handle that for you. </p> </li> </ul> <p>Code of the <code>RestLauncher.java</code> class. (Replaces the legacy launcher)</p> <pre><code>package eu.kartoffelquadrat.zoo;  &lt;----- Replace \"zoo\" by whatever application you are working on\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n/**\n * This class powers up Spring and ensures the annotated controllers are detected.\n */\n@SpringBootApplication\npublic class RestLauncher {\npublic static void main(String[] args) {\nSpringApplication.run(RestLauncher.class, args);\n}\n}\n</code></pre>"},{"location":"zoo-manual.html#beans-and-singletons","title":"Beans and Singletons","text":"<ul> <li>Spring creates new instances of classes annotated with: <pre><code>@RestController\n</code></pre></li> <li>The existing singleton pattern is bypassed, since Spring uses reflection to gain constructor access, even if the declared constructor is private.</li> <li>Having both <code>@RestController</code> and a <code>getInstance</code> method in the same class is dangerous. There are two ways to side-step inconsistency issues:</li> </ul> Autowiring (Recommended)Proxy Classes <ul> <li>If you chose Autowiring, you do not create new classes. You directly annotate the relevant existing classes with <code>@RestController</code>.</li> <li>This tells Spring to create one instance per annotated class, using a default constructor.</li> <li>Any existing singleton pattern is therefore obsolete: If you annotated a class with <code>@RestController</code>, make sure to remove the singleton pattern (the <code>getInstance</code> method) and make the default constructor public.</li> <li>Whenever an instance of such an annotated class is required, you can obtain the spring maintained instance with <code>@Autowired</code>. Example: <pre><code>package eu.kartoffelquadrat.zoo;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RestController;\n@RestController\npublic class FooController {\n/*\n    @Autowired ensures the zoo field is set after instantiation of FooController, given Zoo is annotated with @RestController.\n    */\n@Autowired\nZoo zoo;\npublic void bar() {\n// Here you can access the zoo instance using the local, autowired field (instead of calling the obsolete getInstance method)\nzoo.getOpeningHours();\n}\n}\n</code></pre> <p>Autowired fields are only accessible after class instantiation. Do not invoke methods that require autowired values from a constructor, or you will get a <code>NullPointerException</code> at runtime. Instead annotate those methods with <code>@PostConstruct</code>. This advises spring to invoke a method after class instantiation.</p> </li> </ul> <ul> <li>If you chose Proxy Classes, you do annotate the existing classes. You instead replicate every existing relevant class and place all annotations in the replica. The replica acts as proxy that forwards every method call to the original, using <code>getInstance()</code>.</li> <li>Keep the singleton pattern in the original java classes. They remain untouched. Instead place an <code>@RestController</code> annotation in every proxy class created. Example: <pre><code>package eu.kartoffelquadrat.zoo;\nimport org.springframework.web.bind.annotation.RestController;\n/**\nThis Proxy class is decorated with @RestController, instead of the original singleton class. Any required method of the original class can be proxied with an internal getInstance call.\n*/\n@RestController\npublic class ZooController {\n/** Proxied access to a method of the original / singleton class.\n// Mapping annotation goes here.\npublic OpeningHours getOpeningHours() {\n// Access to the original class is achieved with a call to getInstance.\nreturn Zoo.getInstance().getOpeningHours();\n}\n}\n</code></pre></li> </ul>"},{"location":"zoo-manual.html#resource-mapping-with-annotations","title":"Resource Mapping with Annotations","text":"<p>Note: Below annotation syntax can only be used in classes annotated with <code>@RestController</code>.</p> <ul> <li> <p>Resource mappings (these annotations decorate functions)</p> <ul> <li>Annotations types:  </li> </ul> Get Put Post Delete <code>@GetMapping(\"...\")</code> <code>@PutMapping(\"...\")</code> <code>@PostMapping(\"...\")</code> <code>@DeleteMapping(\"...\")</code> <ul> <li>Arguments:<ul> <li>Static: Full resource path within quotes, e.g.: <code>\"zoo/animals\"</code></li> <li>Dynamic: Full resource path within quotes. Any dynamic placeholder on path is marked by curly brackets, e.g.:<code>\"zoo/animals/{animalname}\"</code></li> </ul> </li> </ul> </li> <li> <p>Parameter mapping (these annotations decorate function parameters)</p> <ul> <li>Pathvariable: <code>@PathVariable(\"animalname\")</code></li> <li>Request body: <code>@RequestBody</code></li> </ul> </li> </ul>"},{"location":"zoo-manual.html#build-and-run","title":"Build and Run","text":"<p>These instructions are to build and run from command line. While developing in IntelliJ you can safly use the \"green triangle button\" next to your new spring launcher class. </p> <p>The first time you start your REST application you might see a warning about incoming connections. Select \"Allow\".  </p> <p>At some point you also need to build your application into a self contained artifact:  </p> Mac OS / LinuxWindows <ul> <li>Build a self contained executable jar file: <code>mvn clean package</code></li> <li>Run the jar file: <code>java -jar target/zoorestified.jar</code> <p><code>zoorestified</code> is the name you provided as <code>finalName</code> in your <code>pom.xml</code>.</p> </li> </ul> <ul> <li>Build a self contained executable jar file: <code>mvn clean package</code></li> <li>Run the jar file: <code>java -jar target\\zoorestified.jar</code> <p><code>zoorestified</code> is the name you provided as <code>finalName</code> in your <code>pom.xml</code>.</p> </li> </ul>"},{"location":"zoo-touchcore.html","title":"Zoo touchcore","text":"<p>I will now illustrate the steps of a TouchCORE assisted conversion to a RESTful service on the example of the Zoo. I will use the previously shown Zoo REST interface description.</p> <p>Afterwards, your task will be to apply the same TouchCORE assisted methodology on a different application. Your task is not to replicate the Zoo conversion while you are watching.</p> <ul> <li>Please now watch this screencast where I demonstrate and explain TouchCORE usage.<ul> <li>Below you then find a summary of the main steps.</li> <li>If anything does not work as expected, take a look at the Troubleshoot section.</li> </ul> </li> </ul>"},{"location":"zoo-touchcore.html#load-touchcore-project","title":"Load TouchCORE Project","text":"<ul> <li>Locate the TouchCORE release folder</li> <li>Launch TouchCORE: <code>java -jar TouchCORE.jar</code></li> <li>Load the prepared Zoo model:<ul> <li>Click the folder icon. </li> </ul> </li> <li>Navigate to the provided Class Diagram<ul> <li>Tap and hold the \"Zoo\" box </li> <li>Select \"Open Realization Model\"</li> <li>Inspect the Class Diagram (Business Logic) </li> </ul> </li> </ul>"},{"location":"zoo-touchcore.html#draw-restl-model","title":"Draw ResTL Model","text":"<ul> <li>Use the Navigation bar to leave the Class Diagram </li> <li>Open the \"ResTL\" perspective:<ul> <li>Tap and hold the \"Zoo\" box </li> <li>Select \"Open Realization Model\"</li> <li>Open the \"Exposed Interface\" model</li> </ul> </li> <li>Modify the ResTL model according to the provided Interface Description<ul> <li>Drag down to add new resources to the tree (start dragging slightly under an existing box) </li> <li>Click the circles to enable Get / Put / Post / Delete methods for a resource. </li> </ul> </li> <li>If you made a mistake, either<ul> <li>tap and hold on a resource to remove it</li> <li>double click a resource to rename it</li> </ul> </li> </ul>"},{"location":"zoo-touchcore.html#resource-and-parameter-mapping","title":"Resource and Parameter Mapping","text":"<ul> <li>While in the ResTL perspective, additionally open the Class Diagram perspective in split-view mode.<ul> <li>Click the Split-View Button </li> <li>Select the Class Diagram model</li> </ul> </li> <li>Drag lines to establish mappings<ul> <li>Connect Resource Methods (circles) to Class Operations </li> <li>Connect Dynamic Resources (text in boxes) to Operation Parameters </li> </ul> </li> </ul> <p>Heads-up: A correctly mapped model showcases lines of both colours, blue and green! If you only see one colour you may have forgotten parameter mappings.</p>"},{"location":"zoo-touchcore.html#code-generation","title":"Code Generation","text":"<ul> <li>Make sure the original application is registered in your system:<ul> <li>Clone the sources of the original (unrestified) java application</li> <li>Install it as library, with <code>mvn clean install</code></li> </ul> </li> <li>Generate the RESTified code with the Transformator button </li> </ul>"},{"location":"zoo-touchcore.html#build-and-run-your-rest-service","title":"Build and Run your REST service","text":"<ul> <li>Navigate to your TouchCORE model directory</li> <li>Open a terminal in the new generated sources folder</li> <li>Run the RESTful service with: <code>mvn clean package spring-boot:run</code></li> <li>Test any Get operation with your browser, e.g.: <code>http://127.0.0.1:8080/zoo/animals</code></li> </ul>"}]}